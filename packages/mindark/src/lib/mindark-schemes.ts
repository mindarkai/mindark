// Generated by ts-to-zod
import { z } from 'zod';
import { type ArkPackage } from './mindark-types';

export const ArkRuntimeDefScheme = z.object({});

export const EchoIdScheme = z.object({
  id: z.string(),
  hash: z.string().optional(),
  url: z.string().optional(),
});

export const LatticeScheme = z.object({
  name: z.string(),
});

export const ArkControllerInterfaceTypeScheme = z.union([
  z.literal('direct'),
  z.literal('stdio'),
]);

export const ArkMessageTransportTypeScheme = z.union([
  z.literal('http'),
  z.literal('stdio'),
  z.literal('humanChat'),
]);

export const ArkMessageScheme = z.object({
  id: z.string(),
  type: z.string(),
  from: z.string().optional(),
  to: z.string(),
  payload: z.any().optional(),
});

export const ArkPathPartTypeScheme = z.union([
  z.literal('tag'),
  z.literal('id'),
  z.literal('name'),
]);

export const ArkPathPartScheme = z.object({
  type: ArkPathPartTypeScheme,
  value: z.string(),
});

export const ArkUrlScheme = z.object({
  protocol: z.string(),
  name: z.string(),
  path: z.array(ArkPathPartScheme),
  isRelative: z.boolean(),
  url: z.string(),
});

const VfsItemScheme = z.any();

export const ArkPackageCtrlRefScheme = z.object({
  type: z.string(),
  controllerPath: z.string().optional(),
  controllerArgs: z.array(z.string()).optional(),
  interfaceType: ArkControllerInterfaceTypeScheme.optional(),
  controllerClass: z.any().optional(),
});

export const ArkPackageScheme: z.ZodSchema<ArkPackage> = z.lazy(() =>
  z.object({
    id: z.string(),
    type: z.string(),
    name: z.string(),
    isModule: z.boolean(),
    description: z.string().optional(),
    author: z.string().optional(),
    data: z.record(z.any()).optional(),
    path: z.string(),
    vfsItem: VfsItemScheme.optional(),
    children: z.array(ArkPackageScheme).optional(),
    controllers: z.array(ArkPackageCtrlRefScheme).optional(),
    tags: z.array(z.string()).optional(),
    runtimeDef: ArkRuntimeDefScheme.optional(),
  }),
);

export const ArkRuntimeScheme = ArkPackageScheme.and(z.object({
  urlPrefix: z.string().optional(),
}));

export const ArkMessageDeliveryScheme = z.object({
  to: ArkUrlScheme,
  message: ArkMessageScheme,
  pathIndex: z.number().optional(),
});

export const EchoScheme = ArkPackageScheme;
